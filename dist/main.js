!function(Q){var U={};function F(B){if(U[B])return U[B].exports;var s=U[B]={i:B,l:!1,exports:{}};return Q[B].call(s.exports,s,s.exports,F),s.l=!0,s.exports}F.m=Q,F.c=U,F.d=function(Q,U,B){F.o(Q,U)||Object.defineProperty(Q,U,{enumerable:!0,get:B})},F.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},F.t=function(Q,U){if(1&U&&(Q=F(Q)),8&U)return Q;if(4&U&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var B=Object.create(null);if(F.r(B),Object.defineProperty(B,"default",{enumerable:!0,value:Q}),2&U&&"string"!=typeof Q)for(var s in Q)F.d(B,s,function(U){return Q[U]}.bind(null,s));return B},F.n=function(Q){var U=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return F.d(U,"a",U),U},F.o=function(Q,U){return Object.prototype.hasOwnProperty.call(Q,U)},F.p="",F(F.s=0)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./src/scaleManager.js\nclass ScaleManager {\r\n    constructor(canvas, isMobile) {\r\n        this.canvas = canvas;\r\n        this.mobile = isMobile;\r\n\r\n        window.addEventListener(\'resize\', () => {\r\n            this.resize(this.canvas);\r\n\r\n            if (this.mobile) {\r\n                if (window.innerWidth < window.innerHeight) {\r\n                    this.leaveIncorrectOrientation();\r\n                } else {\r\n                    this.enterIncorrectOrientation();\r\n                }\r\n            }\r\n        });\r\n\r\n        this.resize(this.canvas);\r\n    }\r\n\r\n    resize(canvas) {\r\n        let scale = Math.min(window.innerWidth / canvas.width, window.innerHeight / canvas.height);\r\n        let orientation = \'left\';\r\n        let extra = (this.mobile) ? \'margin-left: -50%\': \'\';\r\n        let margin = window.innerWidth / 2 - (canvas.width / 2) * scale;\r\n\r\n        canvas.setAttribute(\'style\', \'-ms-transform-origin: \' + orientation + \' top; -webkit-transform-origin: \' + orientation + \' top;\' +\r\n            \' -moz-transform-origin: \' + orientation + \' top; -o-transform-origin: \' + orientation + \' top; transform-origin: \' + orientation + \' top;\' +\r\n            \' -ms-transform: scale(\' + scale + \'); -webkit-transform: scale3d(\' + scale + \', 1);\' +\r\n            \' -moz-transform: scale(\' + scale + \'); -o-transform: scale(\' + scale + \'); transform: scale(\' + scale + \');\' +\r\n            \' display: block; margin-left: \' + margin + \'px;\'\r\n        );\r\n    }\r\n\r\n    enterIncorrectOrientation() {\r\n        document.getElementById("orientation").style.display = "block";\r\n        document.getElementById("content").style.display = "none";\r\n    }\r\n\r\n    leaveIncorrectOrientation() {\r\n        document.getElementById("orientation").style.display = "none";\r\n        document.getElementById("content").style.display = "block";\r\n    }\r\n}\r\n/* harmony default export */ var scaleManager = (ScaleManager);\n// CONCATENATED MODULE: ./src/helpers.ts\n/* harmony default export */ var helpers = ({\r\n    lerp: function (value1, value2, amount) {\r\n        amount = amount < 0 ? 0 : amount;\r\n        amount = amount > 1 ? 1 : amount;\r\n        return value1 + (value2 - value1) * amount;\r\n    },\r\n    dist: function (g1, g2) {\r\n        return Math.sqrt(Math.pow(g1.y - g2.y, 2) + Math.pow(g1.x - g2.x, 2));\r\n    },\r\n    clamp: function (min, max, v) {\r\n        return Math.min(Math.max(v, min), v);\r\n    },\r\n    fadeOut: function (scene, cb) {\r\n        var g = scene.add.graphics({\r\n            fillStyle: {\r\n                color: 0x000000\r\n            }\r\n        });\r\n        g.fillRect(0, 0, scene.game.config.width, scene.game.config.height);\r\n        g.alpha = 0;\r\n        g.depth = 10000;\r\n        scene.tweens.add({\r\n            targets: g,\r\n            alpha: 1,\r\n            duration: 1000,\r\n            onComplete: cb\r\n        });\r\n    },\r\n    fadeIn: function (scene, cb) {\r\n        var g = scene.add.graphics({\r\n            fillStyle: {\r\n                color: 0x000000\r\n            }\r\n        });\r\n        g.fillRect(0, 0, scene.game.config.width, scene.game.config.height);\r\n        g.depth = 10000;\r\n        scene.tweens.add({\r\n            targets: g,\r\n            alpha: 0,\r\n            duration: 1000,\r\n            onComplete: cb\r\n        });\r\n    }\r\n});\r\n\n// CONCATENATED MODULE: ./src/entities/Cloud.ts\nvar __extends = (undefined && undefined.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    }\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar Cloud = /** @class */ (function (_super) {\r\n    __extends(Cloud, _super);\r\n    function Cloud(scene, x, y) {\r\n        var _this = _super.call(this, scene, x, y, Math.random() < 0.3 ? "cloud2" : "cloud1", 0) || this;\r\n        _this.scene = scene;\r\n        _this.scene.add.existing(_this);\r\n        _this.speed = Math.random() + 0.6;\r\n        return _this;\r\n    }\r\n    Cloud.prototype.preUpdate = function (t, delta) {\r\n        _super.prototype.preUpdate.call(this, t, delta);\r\n        this.x += this.speed;\r\n        if (this.x > this.scene.game.config.width + 100)\r\n            this.x = -100;\r\n    };\r\n    return Cloud;\r\n}(Phaser.GameObjects.Sprite));\r\n\r\n\n// CONCATENATED MODULE: ./src/entities/Player.ts\nvar Player_extends = (undefined && undefined.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    }\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar Player = /** @class */ (function (_super) {\r\n    Player_extends(Player, _super);\r\n    function Player(scene, x, y, ball, myGoal, targetGoal) {\r\n        var _this = _super.call(this, scene.matter.world, x, y, "rplayer", 0) || this;\r\n        _this.ball = ball;\r\n        _this.myGoal = myGoal;\r\n        _this.targetGoal = targetGoal;\r\n        _this.canMove = true;\r\n        _this.dying = false;\r\n        _this.trailPoints = [];\r\n        _this.trailGfx = _this.scene.add.graphics({\r\n            lineStyle: {\r\n                width: 2,\r\n                alpha: 0.25,\r\n                color: 0xFFFFFF\r\n            }\r\n        });\r\n        _this.scene = scene;\r\n        _this.scene.add.existing(_this);\r\n        _this.setBody({\r\n            type: "circle",\r\n            radius: 12,\r\n        }, {});\r\n        _this.displayOriginX = 17;\r\n        _this.displayOriginY = 17;\r\n        _this.lastJumpT = -100;\r\n        _this.setBounce(0.9);\r\n        _this.setFrictionAir(0);\r\n        _this.setFrictionStatic(0);\r\n        _this.init();\r\n        _this.mBody.mass = 0.5;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(Player.prototype, "mBody", {\r\n        get: function () { return this.body; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Player.prototype.preUpdate = function (t, delta) {\r\n        _super.prototype.preUpdate.call(this, t, delta);\r\n        if (this.canMove) {\r\n            this.control();\r\n        }\r\n        else {\r\n            this.setVelocity(0, 0);\r\n        }\r\n        if (this.mBody.velocity.x > 7)\r\n            this.setVelocityX(7);\r\n        if (this.mBody.velocity.x < -7)\r\n            this.setVelocityX(-7);\r\n        if (this.dying) {\r\n            this.deathSprite.angle = Math.sin(this.scene.time.now * 0.06) * 30;\r\n        }\r\n        if (this.dying) {\r\n            this.trailPoints.push([this.deathSprite.x, this.deathSprite.y]);\r\n        }\r\n        else {\r\n            this.trailPoints.push([this.x, this.y]);\r\n        }\r\n        while (this.trailPoints.length > 20)\r\n            this.trailPoints.shift();\r\n        var firstPoint = this.trailPoints[0];\r\n        this.trailGfx.clear();\r\n        this.trailGfx.beginPath();\r\n        this.trailGfx.lineStyle(10, 0xFFFFFF, 0.2);\r\n        this.trailGfx.moveTo(firstPoint[0], firstPoint[1]);\r\n        for (var i = 1; i < this.trailPoints.length; i++) {\r\n            var p = this.trailPoints[i];\r\n            this.trailGfx.lineTo(p[0], p[1]);\r\n        }\r\n        this.trailGfx.strokePath();\r\n        this.trailGfx.beginPath();\r\n        this.trailGfx.lineStyle(2, 0xFFFFFF, 0.2);\r\n        this.trailGfx.moveTo(firstPoint[0], firstPoint[1]);\r\n        for (var i = 1; i < this.trailPoints.length; i++) {\r\n            var p = this.trailPoints[i];\r\n            this.trailGfx.lineTo(p[0], p[1] - 12);\r\n        }\r\n        this.trailGfx.strokePath();\r\n        this.trailGfx.beginPath();\r\n        this.trailGfx.lineStyle(2, 0xFFFFFF, 0.2);\r\n        this.trailGfx.moveTo(firstPoint[0], firstPoint[1]);\r\n        for (var i = 1; i < this.trailPoints.length; i++) {\r\n            var p = this.trailPoints[i];\r\n            this.trailGfx.lineTo(p[0], p[1] + 12);\r\n        }\r\n        this.trailGfx.strokePath();\r\n    };\r\n    Player.prototype.move = function (dx) {\r\n        var v = this.mBody.velocity.x;\r\n        var speed = 0.13;\r\n        if (Math.abs(v) < 2)\r\n            speed *= 1.4;\r\n        this.setVelocityX(v + (dx * speed));\r\n    };\r\n    Player.prototype.moveDown = function () {\r\n        var v = this.mBody.velocity.y;\r\n        this.setVelocityY(v + 0.2);\r\n    };\r\n    Player.prototype.jump = function () {\r\n        var t = this.scene.time.now;\r\n        var dt = t - this.lastJumpT;\r\n        if (dt < 500)\r\n            return;\r\n        this.lastJumpT = t;\r\n        this.setVelocityY(-5);\r\n    };\r\n    Player.prototype.die = function (cb) {\r\n        var _this = this;\r\n        this.setVisible(false);\r\n        var spr = this.scene.add.sprite(this.x, this.y, this.texture.key, 0);\r\n        spr.angle = this.angle;\r\n        this.deathSprite = spr;\r\n        this.scene.tweens.add({\r\n            targets: spr,\r\n            x: this.scene.game.config.width / 2,\r\n            y: 130,\r\n            angle: 720,\r\n            ease: "Quad.easeInOut",\r\n            duration: 1000,\r\n            onComplete: function () {\r\n                _this.scene.tweens.add({\r\n                    targets: spr,\r\n                    y: 100,\r\n                    scaleX: 1.5,\r\n                    scaleY: 1.5,\r\n                    ease: "Quad.easeInOut",\r\n                    duration: 1000\r\n                });\r\n                setTimeout(function () {\r\n                    var beamSprite = _this.scene.add.sprite(_this.deathSprite.x, 0, "beam").setOrigin(0.5, 0);\r\n                    beamSprite.alpha = 0;\r\n                    beamSprite.blendMode = Phaser.BlendModes.ADD;\r\n                    beamSprite.depth = 100;\r\n                    beamSprite.scaleX = 0;\r\n                    _this.scene.tweens.add({\r\n                        targets: beamSprite,\r\n                        alpha: 0.3,\r\n                        scaleX: 1,\r\n                        duration: 1250,\r\n                        onComplete: function () {\r\n                            _this.deathSprite.setVisible(false);\r\n                            var emitter0 = _this.scene.add.particles("particle").createEmitter({\r\n                                x: 0,\r\n                                y: 0,\r\n                                speed: { min: -500, max: 500 },\r\n                                angle: { min: 0, max: 360 },\r\n                                scale: { start: 1, end: 0.7 },\r\n                                //blendMode: \'SCREEN\',\r\n                                //active: false,\r\n                                lifespan: 2000,\r\n                                gravityY: 400\r\n                            });\r\n                            emitter0.explode(100, _this.deathSprite.x, _this.deathSprite.y);\r\n                            setTimeout(function () {\r\n                                cb();\r\n                            }, 500);\r\n                        }\r\n                    });\r\n                }, 100);\r\n            }\r\n        });\r\n        this.scene.tweens.add({\r\n            targets: this.scene.cameras.main,\r\n            //x: this.deathSprite.x,\r\n            //y: this.deathSprite.y,\r\n            zoom: 1.6,\r\n            duration: 1000,\r\n            delay: 250,\r\n            ease: "Quad.easeInOut",\r\n        });\r\n        this.dying = true;\r\n    };\r\n    return Player;\r\n}(Phaser.Physics.Matter.Sprite));\r\n\r\n\n// CONCATENATED MODULE: ./src/entities/ControlledPlayer.ts\nvar ControlledPlayer_extends = (undefined && undefined.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    }\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n\r\nvar ControlledPlayer = /** @class */ (function (_super) {\r\n    ControlledPlayer_extends(ControlledPlayer, _super);\r\n    function ControlledPlayer() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    ControlledPlayer.prototype.init = function () {\r\n        this.left = this.scene.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.A);\r\n        this.right = this.scene.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.D);\r\n        this.up = this.scene.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.W);\r\n        this.down = this.scene.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.S);\r\n    };\r\n    ControlledPlayer.prototype.control = function () {\r\n        if (this.left.isDown)\r\n            this.move(-1);\r\n        else if (this.right.isDown)\r\n            this.move(1);\r\n        if (this.up.isDown)\r\n            this.jump();\r\n        if (this.down.isDown)\r\n            this.moveDown();\r\n    };\r\n    return ControlledPlayer;\r\n}(Player));\r\n\r\n\n// CONCATENATED MODULE: ./src/entities/AIPlayer.ts\nvar AIPlayer_extends = (undefined && undefined.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    }\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n\r\n\r\nvar AIStates;\r\n(function (AIStates) {\r\n    AIStates[AIStates["Sleep"] = 0] = "Sleep";\r\n    AIStates[AIStates["BallChase"] = 1] = "BallChase";\r\n})(AIStates || (AIStates = {}));\r\nvar AIPlayer_AIPlayer = /** @class */ (function (_super) {\r\n    AIPlayer_extends(AIPlayer, _super);\r\n    function AIPlayer() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    AIPlayer.prototype.init = function () {\r\n        this.setTexture("bplayer");\r\n        this.displayOriginX = 13;\r\n        this.left = this.scene.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.A);\r\n        this.right = this.scene.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.D);\r\n        this.up = this.scene.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.W);\r\n        this.state = AIStates.Sleep;\r\n    };\r\n    AIPlayer.prototype.control = function () {\r\n        var _this = this;\r\n        var t = this.scene.time.now;\r\n        var dt = t - this.lastStateChangeT;\r\n        var ballDx = this.ball.x - this.x;\r\n        var ballDy = this.ball.y - this.y;\r\n        var ballTheta = Math.atan2(ballDy, ballDx);\r\n        var ballDistToMyGoal = helpers.dist(this.ball, this.myGoal);\r\n        var ballDistToTargetGoal = helpers.dist(this.ball, this.targetGoal);\r\n        var targetGoalDx = this.ball.x - this.targetGoal.x;\r\n        switch (this.state) {\r\n            case AIStates.Sleep:\r\n                if (!this.changeTimeout) {\r\n                    this.changeTimeout = setTimeout(function () {\r\n                        _this.changeTimeout = null;\r\n                        _this.state = AIStates.BallChase;\r\n                    }, 1500);\r\n                }\r\n                break;\r\n            case AIStates.BallChase:\r\n                if (targetGoalDx < 0 && ballDx < 0) {\r\n                    this.move(-1);\r\n                }\r\n                else if (targetGoalDx > 0 && ballDx > 0) {\r\n                    this.move(1);\r\n                }\r\n                else {\r\n                    if (ballDx < 0)\r\n                        this.move(-1);\r\n                    else\r\n                        this.move(1);\r\n                }\r\n                if (ballDy < -10)\r\n                    this.jump();\r\n                if (dt > 1500)\r\n                    this.switchState(AIStates.Sleep);\r\n                break;\r\n        }\r\n    };\r\n    AIPlayer.prototype.switchState = function (newState) {\r\n        this.lastStateChangeT = this.scene.time.now;\r\n        this.state = newState;\r\n    };\r\n    return AIPlayer;\r\n}(Player));\r\n\r\n\n// CONCATENATED MODULE: ./src/entities/Goal.ts\nvar Goal_extends = (undefined && undefined.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    }\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar Goal = /** @class */ (function (_super) {\r\n    Goal_extends(Goal, _super);\r\n    function Goal(scene, x, y, color) {\r\n        var _this = _super.call(this, scene, x, y) || this;\r\n        _this.color = color;\r\n        _this.scene = scene;\r\n        _this.sprite = _this.scene.add.sprite(0, 0, color + "goal");\r\n        _this.add(_this.sprite);\r\n        //this.accent = this.scene.add.sprite(0, 0, `${color}goal_accent`);\r\n        //this.add(this.accent);\r\n        _this.scene.add.existing(_this);\r\n        return _this;\r\n    }\r\n    Goal.prototype.update = function () {\r\n        _super.prototype.update.call(this);\r\n        //this.accent.angle += 1.5;\r\n        this.sprite.angle += -2;\r\n        /*\r\n        const t = this.scene.time.now;\r\n        const s = 1 + Math.sin(t*0.005)*0.15;\r\n        this.scaleX = s;\r\n        this.scaleY = s;\r\n        */\r\n    };\r\n    Goal.prototype.explode = function () {\r\n        var explSprite = this.scene.add.sprite(this.x, this.y, this.color + "goalexpl");\r\n        explSprite.angle = Math.random() * 360;\r\n        explSprite.setScale(2, 2);\r\n        explSprite.anims.play(this.color + "goalexpl");\r\n    };\r\n    return Goal;\r\n}(Phaser.GameObjects.Container));\r\n\r\n\n// CONCATENATED MODULE: ./src/entities/Ball.ts\nvar Ball_extends = (undefined && undefined.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    }\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar Ball = /** @class */ (function (_super) {\r\n    Ball_extends(Ball, _super);\r\n    function Ball(scene, x, y) {\r\n        var _this = _super.call(this, scene.matter.world, x, y, "ball", 0) || this;\r\n        _this.trailPoints = [];\r\n        _this.trailGfx = _this.scene.add.graphics({\r\n            lineStyle: {\r\n                width: 2,\r\n                alpha: 0.25,\r\n                color: 0xFFFFFF\r\n            }\r\n        });\r\n        _this.scene = scene;\r\n        _this.scene.add.existing(_this);\r\n        _this.setBody({\r\n            type: "circle",\r\n            radius: 8\r\n        }, {});\r\n        _this.setBounce(1);\r\n        _this.setFrictionAir(0);\r\n        _this.setFrictionStatic(0);\r\n        _this.body.mass = 0.01;\r\n        return _this;\r\n    }\r\n    Ball.prototype.preUpdate = function (t, delta) {\r\n        _super.prototype.preUpdate.call(this, t, delta);\r\n        this.trailPoints.push([this.x, this.y]);\r\n        while (this.trailPoints.length > 20)\r\n            this.trailPoints.shift();\r\n        var firstPoint = this.trailPoints[0];\r\n        this.trailGfx.clear();\r\n        this.trailGfx.beginPath();\r\n        this.trailGfx.lineStyle(5, 0xFFFFFF, 0.2);\r\n        this.trailGfx.moveTo(firstPoint[0], firstPoint[1]);\r\n        for (var i = 1; i < this.trailPoints.length; i++) {\r\n            var p = this.trailPoints[i];\r\n            this.trailGfx.lineTo(p[0], p[1]);\r\n        }\r\n        this.trailGfx.strokePath();\r\n    };\r\n    return Ball;\r\n}(Phaser.Physics.Matter.Sprite));\r\n\r\n\n// CONCATENATED MODULE: ./src/scenes/MainScene.ts\nvar MainScene_extends = (undefined && undefined.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    }\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n\r\n\r\n\r\n\r\n\r\n\r\nvar DEBUG = false;\r\nvar SCORE_DIST = 17;\r\nvar GameStates;\r\n(function (GameStates) {\r\n    GameStates[GameStates["Playing"] = 1] = "Playing";\r\n    GameStates[GameStates["Ended"] = 2] = "Ended";\r\n})(GameStates || (GameStates = {}));\r\nvar MainScene_MainScene = /** @class */ (function (_super) {\r\n    MainScene_extends(MainScene, _super);\r\n    function MainScene() {\r\n        var _this = _super.call(this, {\r\n            key: "MainScene"\r\n        }) || this;\r\n        _this.state = GameStates.Playing;\r\n        return _this;\r\n    }\r\n    MainScene.prototype.preload = function () {\r\n        this.load.image("ball", "/assets/export-ball.png");\r\n        this.load.image("beam", "/assets/export-beam.png");\r\n        this.load.image("bg", "/assets/export-bg.png");\r\n        this.load.image("bgoal", "/assets/export-bgoal.png");\r\n        this.load.image("bgoal_accent", "/assets/export-bgoal_accent.png");\r\n        this.load.image("bplayer", "/assets/export-bplayer.png");\r\n        this.load.image("cloud1", "/assets/export-cloud1.png");\r\n        this.load.image("cloud2", "/assets/export-cloud2.png");\r\n        this.load.image("ground", "/assets/export-ground.png");\r\n        this.load.image("Layer", "/assets/export-Layer");\r\n        this.load.image("lside", "/assets/export-lside.png");\r\n        this.load.image("m1", "/assets/export-m1.png");\r\n        this.load.image("m2", "/assets/export-m2.png");\r\n        this.load.image("particle", "/assets/export-particle.png");\r\n        this.load.image("rgoal", "/assets/export-rgoal.png");\r\n        this.load.image("rgoal_accent", "/assets/export-rgoal_accent.png");\r\n        this.load.image("rgoal", "/assets/export-rgoal-expl.png");\r\n        this.load.image("rplayer", "/assets/export-rplayer.png");\r\n        this.load.image("rside", "/assets/export-rside.png");\r\n        this.load.image("sun", "/assets/export-sun.png");\r\n        this.load.image("ui", "/assets/export-ui.png");\r\n        this.load.spritesheet("bgoalexpl", "/assets/export-bgoalexpl.png", {\r\n            frameWidth: 70,\r\n            frameHeight: 70,\r\n            startFrame: 0,\r\n            endFrame: 8,\r\n        });\r\n        this.load.spritesheet("rgoalexpl", "/assets/export-rgoalexpl.png", {\r\n            frameWidth: 70,\r\n            frameHeight: 70,\r\n            startFrame: 0,\r\n            endFrame: 8,\r\n        });\r\n    };\r\n    MainScene.prototype.create = function () {\r\n        var _this = this;\r\n        this.anims.create({\r\n            key: "bgoalexpl",\r\n            frameRate: 15,\r\n            repeat: 0,\r\n            frames: this.anims.generateFrameNumbers("bgoalexpl", { start: 0, end: 8 })\r\n        });\r\n        this.anims.create({\r\n            key: "rgoalexpl",\r\n            frameRate: 15,\r\n            repeat: 0,\r\n            frames: this.anims.generateFrameNumbers("rgoalexpl", { start: 0, end: 8 })\r\n        });\r\n        this.state = GameStates.Playing;\r\n        var bg = this.add.sprite(0, 0, "bg").setOrigin(0, 0);\r\n        this.clouds = [];\r\n        for (var i = 0; i < 14; i++) {\r\n            this.clouds.push(new Cloud(this, -100 + (Math.random() * 450), -10 + Math.random() * 30));\r\n        }\r\n        var lside = this.add.sprite(0, this.game.config.height, "lside").setOrigin(0, 1);\r\n        var rside = this.add.sprite(this.game.config.width, this.game.config.height, "rside").setOrigin(1, 1);\r\n        var ground = this.add.sprite(0, this.game.config.height, "ground").setOrigin(0, 1);\r\n        var pGround = this.matter.add.rectangle(0, 280, 1000, 100, { isStatic: true });\r\n        var pLside = this.matter.add.rectangle(0, 236, 110, 100, { isStatic: true, angle: 0.8 });\r\n        var pRside = this.matter.add.rectangle(481, 236, 110, 100, { isStatic: true, angle: -0.8 });\r\n        this.matter.world.setBounds();\r\n        this.ball = new Ball(this, this.game.config.width / 2, 100);\r\n        this.rGoal = new Goal(this, 51, 131, "r");\r\n        this.bGoal = new Goal(this, this.game.config.width - 50, 131, "b");\r\n        this.rPlayer = new ControlledPlayer(this, 100, 100, this.ball, this.rGoal, this.bGoal);\r\n        this.bPlayer = new AIPlayer_AIPlayer(this, 380, 100, this.ball, this.bGoal, this.rGoal);\r\n        if (DEBUG) {\r\n            this.debugText = this.add.text(100, 100, "100", {\r\n                fontSize: 20\r\n            });\r\n        }\r\n        var uiBg = this.add.sprite(0, 0, "ui").setOrigin(0, 0);\r\n        var lScoreText = this.add.text(43, 240, MainScene.rScore.toString(), {\r\n            fontSize: 18,\r\n            align: "center"\r\n        });\r\n        var rScoreText = this.add.text(this.game.config.width - 53, 240, MainScene.rScore.toString(), {\r\n            fontSize: 18,\r\n            align: "center"\r\n        });\r\n        this.rPlayer.canMove = false;\r\n        this.bPlayer.canMove = false;\r\n        this.rPlayer.setStatic(true);\r\n        this.bPlayer.setStatic(true);\r\n        this.ball.setStatic(true);\r\n        helpers.fadeIn(this, function () {\r\n            _this.rPlayer.canMove = true;\r\n            _this.bPlayer.canMove = true;\r\n            _this.rPlayer.setStatic(false);\r\n            _this.bPlayer.setStatic(false);\r\n            _this.ball.setStatic(false);\r\n        });\r\n        //this.goal("r");\r\n    };\r\n    MainScene.prototype.update = function () {\r\n        this.rGoal.update();\r\n        this.bGoal.update();\r\n        var bGoalDist = helpers.dist(this.bGoal, this.ball);\r\n        if (DEBUG) {\r\n            this.debugText.text = bGoalDist.toString();\r\n        }\r\n        if (helpers.dist(this.rGoal, this.ball) < SCORE_DIST)\r\n            this.goal("r");\r\n        if (bGoalDist < SCORE_DIST)\r\n            this.goal("b");\r\n    };\r\n    MainScene.prototype.goal = function (side) {\r\n        var _this = this;\r\n        if (this.state == GameStates.Ended)\r\n            return;\r\n        this.state = GameStates.Ended;\r\n        var deadPlayer = side == "r" ? this.rPlayer : this.bPlayer;\r\n        var scoringPlayer = side == "r" ? this.bPlayer : this.rPlayer;\r\n        if (side == "r") {\r\n            this.rGoal.explode();\r\n            MainScene.bScore++;\r\n        }\r\n        if (side == "b") {\r\n            this.bGoal.explode();\r\n            MainScene.rScore++;\r\n        }\r\n        deadPlayer.canMove = false;\r\n        this.cameras.main.shake(300, 0.03);\r\n        deadPlayer.die(function () {\r\n            helpers.fadeOut(_this, function () {\r\n                _this.scene.start("MainScene");\r\n            });\r\n        });\r\n    };\r\n    MainScene.rScore = 0;\r\n    MainScene.bScore = 0;\r\n    return MainScene;\r\n}(Phaser.Scene));\r\n\r\n\n// CONCATENATED MODULE: ./src/LD43.ts\n\r\n\r\nvar LD43_LD43 = /** @class */ (function () {\r\n    function LD43() {\r\n        var _this = this;\r\n        this._game = new Phaser.Game({\r\n            width: 480,\r\n            height: 270,\r\n            type: Phaser.AUTO,\r\n            zoom: 1,\r\n            render: {\r\n                pixelArt: true,\r\n                antialias: false,\r\n                roundPixels: true,\r\n                transparent: false,\r\n            },\r\n            scene: MainScene_MainScene,\r\n            physics: {\r\n                default: "matter",\r\n                matter: {\r\n                    gravity: { x: 0, y: 0.65 },\r\n                }\r\n            },\r\n            callbacks: {\r\n                postBoot: function () {\r\n                    new scaleManager(_this._game.canvas, !_this._game.device.os.desktop);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    return LD43;\r\n}());\r\n\r\n\n// CONCATENATED MODULE: ./src/index.ts\n\r\nvar g = new LD43_LD43();\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n')}]);